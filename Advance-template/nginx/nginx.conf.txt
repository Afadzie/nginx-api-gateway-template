worker_processes auto;
events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_shared_dict jwt_keys 10m;
    resolver 8.8.8.8;

    include /etc/nginx/mime.types;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;

    # Upstream Definitions (Load Balancing for Microservice 4 & 5)
    upstream microservice1 { server microservice1:8001; }
    upstream microservice2 { server microservice2:8002; }
    upstream microservice3 { server microservice3:8003; }

    # Load Balancer for Microservice 4
    upstream microservice4 {
        least_conn; # Use the server with the least connections
        server microservice4-1:8004;
        server microservice4-2:8004;
        server microservice4-3:8004 backup; # Used only when others fail
    }

    # Load Balancer for Microservice 5
    upstream microservice5 {
        round_robin; # Distributes requests evenly
        server microservice5-1:8005 max_fails=3 fail_timeout=10s;
        server microservice5-2:8005 max_fails=3 fail_timeout=10s;
    }

    server {
        listen 80;
        server_name api.mydomain.com;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name api.mydomain.com;

        ssl_certificate /etc/nginx/ssl/api.crt;
        ssl_certificate_key /etc/nginx/ssl/api.key;

        location / {
            return 404;
        }

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        if ($request_method = OPTIONS) { return 204; }

        # API Gateway Routing
        location /service1/ {
            access_by_lua_file /etc/nginx/auth.lua;
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://microservice1/;
        }

        location /service2/ {
            access_by_lua_file /etc/nginx/auth.lua;
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://microservice2/;
        }

        location /admin/service3/ {
            access_by_lua_file /etc/nginx/auth.lua;
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://microservice3/;
        }

        # Load Balanced Microservice 4
        location /admin/service4/ {
            access_by_lua_file /etc/nginx/auth.lua;
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://microservice4/;
        }

        # Load Balanced Microservice 5
        location /admin/service5/ {
            access_by_lua_file /etc/nginx/auth.lua;
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://microservice5/;
        }

        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        server_tokens off;
    }
}
